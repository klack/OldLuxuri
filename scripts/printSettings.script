///////////////////////////////////////////////////////////////////////////////
/// @fn controller,1
///
/// @brief Program loop
/// @brief state.txts: null, ready
///////////////////////////////////////////////////////////////////////////////
strlen commands.queue.txt,c //See if there are commands in the queue
if(c==0)
{
  if(printer.printState.txt=="pausing")
  {
    if(ok==1&&busy==0)
    {
      if(printer.x.txt!="?")
      {
        click luxPause,0 
        printer.printState.txt="paused"
        click updateView,1         
      }
    }
  }
  if(printer.printState.txt=="resuming")
  {
    printer.printState.txt="printing"
    click updateView,1 
  }
  if(printer.printState.txt=="stopping")
  {
    if(ok==1&&busy==0)
    {
      printer.printState.txt="null"
      printer.sdPrinting.val=0
      page main
    }
  }
}


///////////////////////////////////////////////////////////////////////////////
/// @fn updateView,1...
///
/// @brief Updates states for controls
///////////////////////////////////////////////////////////////////////////////
if(printer.printState.txt=="stopping") //Stopping
{
  bStop.picc=bStop.picc2
}
if(printer.printState.txt=="pausing") //Pausing
{
  tPlayPause.txt="Finishing Moves..."
  setlayer bClose,0
  bClose.aph=0
}
if(printer.printState.txt=="paused") //Paused
{
  bPauseResume.picc=bPauseResume.picc2+2
  tPlayPause.txt="Resume"
  setlayer bClose,0
  bClose.aph=0
}
if(printer.printState.txt=="printing") //Printing
{
  bPauseResume.picc=bPauseResume.picc2+1
  tPlayPause.txt="Pause"
  setlayer bClose,255
  bClose.aph=127
}
if(printer.speed.val!=100&&printer.speed.val!=0) //Speed
{
  covx printer.speed.val,bSpeed.txt,0,0
  bSpeed.picc=bSpeed.picc2+2
  bSpeed.pco2=BLACK
}else
{
  bSpeed.txt=""
  bSpeed.picc=bSpeed.picc2+1
  bSpeed.pco2=WHITE
}
if(printer.flow.val!=100&&printer.flow.val!=0) //Flow
{
  covx printer.flow.val,bFlow.txt,0,0
  bFlow.picc=bFlow.picc2+2
}else
{
  bFlow.txt=""
  bFlow.picc=bFlow.picc2+1
}
tBusy.txt="" //Busy Text
if(busy==1) 
{
  tBusy.txt="Busy"
}
if(QueueBlocks>0)
{
  tBusy.txt="Commands Queued"
}
doevents

///////////////////////////////////////////////////////////////////////////////
/// @fn Pre-initialize
/// @brief Page Initialization
///////////////////////////////////////////////////////////////////////////////
ReturnPage=dp
DiagReturnPage=dp
if(HandleCallback==1)
{
  if(ReturnObj==0) //Direct to custom controller callback
  {
    click controller,0
  }else
  {
    click b[ReturnObj],0
  }
  ReturnVal=-1
  HandleCallback=0
}else
{
  click luxFlow,1
  click luxSpeed,1
  click luxGetPos,1    
}
click updateView,1
click controller,1

///////////////////////////////////////////////////////////////////////////////
//bSpeed click
ReturnObj=2
numpad.tCaption.txt="Print Speed"
covx printer.speed.val,vars.returnVal.txt,0,0
page numpad
//bSpeed callback
covx printer.speed.val,vars.s.txt,0,0
if(vars.returnVal.txt!=vars.s.txt)
{
  click luxSpeed,0
  click sendCommand,0
}

//bFlow click
ReturnObj=3
numpad.tCaption.txt="Print Flow"
covx printer.flow.val,vars.returnVal.txt,0,0
page numpad
//bFlow callback
covx printer.flow.val,vars.s.txt,0,0
if(vars.returnVal.txt!=vars.s.txt)
{
  click luxFlow,0
}

//bPauseResume click
if(printer.printState.txt=="printing")
{
  printer.printState.txt="pausing"
  click updateView,1  
  click luxPause,1
}else
{
  printer.printState.txt="resuming"
  click updateView,1  
  click luxResume,1
}
click updateView,1

//Stop click
diagPrompt.tMessage.txt="Stop Print?"
ReturnVal=1
ReturnObj=4
page diagPrompt
//Stop callback
if(ReturnVal!=-1)
{
  tsw 255,0
  printer.printState.txt="stopping"
  click updateView,1
  click luxStopPrint,0
  click luxStopPrint,1
}


/// @fn luxGetPos_1
commands.queue.txt+="M114"
click sendCommand,0



///////////////////////////////////////////////////////////////////////////////
/// @fn animate
///////////////////////////////////////////////////////////////////////////////
if(tBusy.txt!="")
{
  if(tBusy.aph==127) //Flash
  {
    tBusy.aph=0
  }else
  {
    tBusy.aph=127
  }
}



///////////////////////////////////////////////////////////////////////////////
/// @fn run
/// @brief Program Loop on 1000ms timer
///////////////////////////////////////////////////////////////////////////////
click updateView,1
click controller,1
click sendCommand,0


// //Mock Data
// parse.buffer.txt="echo:E1 Flow: 90%"
// click notifyEOL,1
// parse.buffer.txt="FR:90%"
// click notifyEOL,1


// parse.buffer.txt="ok"
// click notifyEOL,1

// busy=1

// ok=0