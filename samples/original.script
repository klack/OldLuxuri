if(usize>0)
{
  SerialPos=0
  while(SerialPos<usize)
  {
    // check next character
    ucopy gcodeinput.startchar.txt,SerialPos,1,0
    strlen gcodeinput.b[SerialLines].txt,maxlen
    if(u[SerialPos]==10||u[SerialPos]==13)m
    {
      // scroll up serial
      for(Line=1;Line<SerialLines;Line++)
      {
        gcodeinput.b[Line].txt=gcodeinput.b[Line+1].txt
      }
      gcodeinput.b[Line].txt=""
      //Nextion reset
      substr gcodeinput.t16.txt,tmppage.tmpX.txt,0,5
      if(tmppage.tmpX.txt=="start"&&maxlen==5)
      {
        rest
      }
      //Nextion reset//
      //ERROR
      substr gcodeinput.t16.txt,tmppage.tmpX.txt,0,6
      if(tmppage.tmpX.txt=="Error:")
      {
        page error
      }
      //ERROR//
      //M117
      substr gcodeinput.t16.txt,tmppage.tmpX.txt,0,9
      if(tmppage.tmpX.txt=="echo:M117")
      {
        substr gcodeinput.t16.txt,tmppage.M117.txt,10,maxlen-10
      }
      //M117//
      //Toolchange
      if(gcodeinput.t16.txt=="echo:Active Extruder: 0")
      {
        tool=0
      }
      if(gcodeinput.t16.txt=="echo:Active Extruder: 1")
      {
        tool=1
      }
      //Toolchange//
      //Temp
      substr gcodeinput.t16.txt,tmppage.tmpX.txt,0,2
      if(tmppage.tmpX.txt==" T")
      {
        for(StartPos=0;StartPos<maxlen;StartPos++)
        {
          substr gcodeinput.t16.txt,tmppage.tmp.txt,StartPos,3
          for(resd=StartPos;resd<maxlen;resd++)
          {
            substr gcodeinput.t16.txt,tmppage.EndPos.txt,resd,2
            if(tmppage.EndPos.txt==" /")
            {
              if(tmppage.tmp.txt==" B:")
              {
                substr gcodeinput.t16.txt,tmppage.vaBed.txt,StartPos+3,3
                covx tmppage.vaBed.txt,Hotbed,0,0
                covx Hotbed,tmppage.vaBed.txt,0,0
                strlen tmppage.vaBed.txt,TempPos
                substr gcodeinput.t16.txt,tmppage.vaBedT.txt,StartPos+TempPos+8,3
                covx tmppage.vaBedT.txt,HotbedT,0,0
                covx HotbedT,tmppage.vaBedT.txt,0,0
              }
              if(tmppage.extruder.txt=="1")
              {
                if(tmppage.tmp.txt==" T:")
                {
                  substr gcodeinput.t16.txt,tmppage.vaE0.txt,StartPos+3,3
                  covx tmppage.vaE0.txt,Temp0,0,0
                  covx Temp0,tmppage.vaE0.txt,0,0
                  strlen tmppage.vaE0.txt,TempPos
                  substr gcodeinput.t16.txt,tmppage.vaE0T.txt,StartPos+TempPos+8,3
                  covx tmppage.vaE0T.txt,Temp0T,0,0
                  covx Temp0T,tmppage.vaE0T.txt,0,0
                }
              }else
              {
                if(tmppage.tmp.txt=="T0:")
                {
                  substr gcodeinput.t16.txt,tmppage.vaE0.txt,StartPos+3,3
                  covx tmppage.vaE0.txt,Temp0,0,0
                  covx Temp0,tmppage.vaE0.txt,0,0
                  strlen tmppage.vaE0.txt,TempPos
                  substr gcodeinput.t16.txt,tmppage.vaE0T.txt,StartPos+TempPos+8,3
                  covx tmppage.vaE0T.txt,Temp0T,0,0
                  covx Temp0T,tmppage.vaE0T.txt,0,0
                }
                if(tmppage.tmp.txt=="T1:")
                {
                  substr gcodeinput.t16.txt,tmppage.vaE1.txt,StartPos+3,3
                  covx tmppage.vaE1.txt,Temp1,0,0
                  covx Temp1,tmppage.vaE1.txt,0,0
                  strlen tmppage.vaE1.txt,TempPos
                  substr gcodeinput.t16.txt,tmppage.vaE1T.txt,StartPos+TempPos+8,3
                  covx tmppage.vaE1T.txt,Temp1T,0,0
                  covx Temp1T,tmppage.vaE1T.txt,0,0
                }
              }
              resd=maxlen
            }
          }
        }
      }
      //Temp//
    }
    // cariage return
    if(u[SerialPos]==13)
    {
      SerialPos++
      if(SerialPos<usize)
      {
        // but no linefeed
        if(u[SerialPos]!=10)
        {
          SerialPos--
        }
      }else
      {
        // no linefeed
        SerialPos--
      }
    }else
    {
      // Add character to line if not CR or LF
      if(u[SerialPos]!=10)
      {
        gcodeinput.b[SerialLines].txt+=gcodeinput.startchar.txt
      }
    }
    // next character
    SerialPos++
  }
  if(SerialPos==usize)
  {
    code_c
  }
}
